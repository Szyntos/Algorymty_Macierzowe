import numpy as np
from collections import Counter
import pandas as pd
import random
from time import time
from pprint import pprint
import matplotlib.pyplot as plt
import seaborn as sns
from scipy.interpolate import UnivariateSpline

class Num(float):
    counts = Counter(mul=0, add=0, div=0)

    def __add__(self, other):
        self.counts["add"] += 1
        return Num(super(Num, self).__add__(other))

    def __radd__(self, other):
        self.counts["add"] += 1
        return Num(super(Num, self).__radd__(other))

    def __mul__(self, other):
        self.counts["mul"] += 1
        return Num(super(Num, self).__mul__(other))

    def __rmul__(self, other):
        self.counts["mul"] += 1
        return Num(super(Num, self).__rmul__(other))

    def __sub__(self, other):
        self.counts["add"] += 1
        return Num(super(Num, self).__sub__(other))

    def __rsub__(self, other):
        self.counts["add"] += 1
        return Num(super(Num, self).__rsub__(other))

    def __truediv__(self, other):
        self.counts["div"] += 1
        return Num(super(Num, self).__truediv__(other))

    def __rtruediv__(self, other):
        self.counts["div"] += 1
        return Num(super(Num, self).__rtruediv__(other))

    def reset_counter(self):
        self.counts["mul"] = 0
        self.counts["add"] = 0
        self.counts["div"] = 0

def matrix_partition(A):
    n = A.shape[0] // 2
    m = A.shape[1] // 2
    A11 = A[:n, :m]
    A12 = A[:n, m:]
    A21 = A[n:, :m]
    A22 = A[n:, m:]
    return A11, A12, A21, A22

def matrix_repartition(A11, A12, A21, A22):
    C = np.block([[A11, A12],
                  [A21, A22]])
    return C


def compare(A, B):
    return np.allclose(np.array(A, dtype=float), np.array(B, dtype=float), rtol=1e-05,
                           atol=1e-08, equal_nan=False)

def create_M_2(n):
    n = 2 ** n
    return np.array([[Num((random.uniform(0.00000001, 1))) for _ in range(n)] for _ in range(n)], dtype=Num)

def create_M(n):
    return np.array([[Num((random.uniform(0.00000001, 1))) for _ in range(n)] for _ in range(n)], dtype=Num)
def reset_counter():
    Num().reset_counter()

def inverse(A):
    if A.shape[0] == 1:
        if A[0][0] != 0:
            return np.array([[Num(1)/A[0][0]]], dtype=Num)
        else:
            raise ValueError("Matrix not Invertible")
    A11, A12, A21, A22 = matrix_partition(A)
    A11_i = inverse(A11)
    A2111_i = A21 @ A11_i
    S22 = A22 - A2111_i @ A12
    S22_i = inverse(S22)
    B11 = A11_i @ (np.eye(A11_i.shape[0], dtype=Num) + A12 @ S22_i @ A2111_i)
    B12 = -A11_i @ A12 @ S22_i
    B21 = -S22_i @ A2111_i
    B22 = S22_i
    return matrix_repartition(B11, B12, B21, B22)

def check_inverse(A):
    return compare(inverse(A), np.linalg.inv(np.array(A, dtype=float)))

A = create_M(8)
print(check_inverse(A))

def LU(A):
    if A.shape[0] == 1:
        return np.array(A, dtype=Num), np.array([[1]], dtype=Num)
    A11, A12, A21, A22 = matrix_partition(A)
    L11, U11 = LU(A11)
    U11_i = inverse(U11)
    L21 = A21 @ U11_i
    L11_i = inverse(L11)
    U12 = L11_i @ A12
    S = A22 - L21 @ U12
    Ls, Us = LU(S)
    U22 = Us
    L22 = Ls
    return [matrix_repartition(L11, np.zeros((L11.shape[0], L22.shape[1]), dtype=Num), L21, L22),
            matrix_repartition(U11, U12, np.zeros((U22.shape[0], U11.shape[1]), dtype=Num), U22)]

def check_LU(A):
    L, U = LU(A)
    return compare(L, np.tril(L)) and compare(U, np.triu(U)) and compare(A, L @ U)


A = create_M(8)
L, U = LU(A)
print(check_LU(A))
# print(L)

def determinant(A):
    L, U = LU(A)
    return np.prod(np.diag(L))

def check_determinant(A):
    return compare(determinant(A), np.linalg.det(np.array(A, dtype=float)))

print(check_determinant(A))

def test_functions(bound):
    df = pd.DataFrame()
    for n in range(1, bound):
        A = create_M(n)
        methods = {"Inverse":inverse, "LU":LU, "Determinant":determinant}
        checks = [check_inverse, check_LU, check_determinant]
        i = 0
        for method_name, method in methods.items():
            print(n, method_name[0], end=" ")
            df.at[n, method_name] = checks[i](A)
            i += 1
    return df

test_functions(30)

def stat_functions(bound, step=1):
    df_times = pd.DataFrame()
    df_add = pd.DataFrame()
    df_mul = pd.DataFrame()
    df_div = pd.DataFrame()
    for n in range(step, bound, step):
        A = create_M(n)
        methods = {"Inverse":inverse, "LU":LU, "Determinant":determinant}
        for method_name, method in methods.items():
            reset_counter()
            print(n, method_name[0], end=" ")
            start_time = time()
            method(A)
            df_times.at[n, method_name] = time() - start_time
            df_add.at[n, method_name] = Num().counts["add"]
            df_mul.at[n, method_name] = Num().counts["mul"]
            df_div.at[n, method_name] = Num().counts["div"]
    return df_times, df_add, df_mul, df_div

# dfs = stat_functions(501, 10)
dfs = [pd.read_csv("csv/csv_gglclb/df_"+str(i)+".csv", index_col=0) for i in range(4)]

def plot_stats(dfs):
    titles = ["Methods' times comparison", "Methods' addition counts comparison", "Methods' multiplication counts comparison",  "Methods' division counts comparison"]
    y_labels = ["Time [s]", "Addition count", "Multiplication count", "Division count"]
    fig, axes = plt.subplots(nrows=4, ncols=1, figsize=(8, 30))
    i = 0
    for df, title, y_label in zip(dfs, titles, y_labels):

        # Polynomial interpolation and plotting
        plt.figure(figsize=(10, 6))
        sns.set(style="whitegrid")
        ax = axes[i]
        for method in df.columns:
            x = df.index
            y = df[method]

            y=y.dropna(how='all')
            x=x.dropna(how='all')[:len(y)]

            spline = UnivariateSpline(x, y, s=0)
            x_interp = np.linspace(min(x), max(x), 100)
            y_interp = spline(x_interp)

            # Plot the interpolated curve
            ax.plot(x_interp, y_interp, label=method)
            ax.scatter(x, y)

            s = " (Matrices of sizes x $\\times$ x)"
            ax.set_xlabel('Size od matrices' + s)
            ax.set_ylabel(y_label)
            ax.set_title(title)

            # Show legend
            ax.legend()
        i += 1

    plt.show()


plot_stats(dfs)

# for i, df in enumerate(dfs):
#     # print(df)
#     df.to_csv("csv/df_"+str(i)+".csv")
# print(dfs[0].sum().sum())
# dfs[2]

from scipy.optimize import curve_fit
from scipy.stats import linregress

def func_exp(x, a, b):
    return a * np.power(x, b)
def func_line(x, a, b):
    return a * x + b

def fit_to_df(df, line=False):
    coeffs = {}
    for method in df.columns:
        x = df.index
        y = df[method]
        y = y.dropna(how='all')
        x = x.dropna(how='all')[:len(y)]


        if line:
            # slope, intercept, r, p, se = linregress(x, y)
            # popt = [slope, intercept]
            popt, _ = curve_fit(func_line, x, y)
            residuals = y- func_line(x, *popt)
            ss_res = np.sum(residuals**2)
            print(ss_res)
        else:
            popt, _ = curve_fit(func_exp, x, y)
            residuals = y- func_exp(x, *popt)
            ss_res = np.sum(residuals**2)
            print(ss_res)
        coeffs[method] = popt
    return coeffs

fit_to_df(dfs[0])

fit_to_df(dfs[1])

fit_to_df(dfs[2])

fit_to_df(dfs[3], True)

A = np.array([[1, 2], [5, 8]], dtype=Num)
A

inverse(A)

determinant(A)